<!--#include virtual="header.html" -->

<body>

<h1 class="title">Project 2b - OCaml higher order functions, and data </h1>
<center>
Due 11:59pm, Sep 30, 2016
</center>

<p>

</center>
<h2>Introduction</h2>

<p> The goal of this project is to increase you familiar with
  programming in OCaml using higher order functions and user-defined
  types. You will have to write a total of 15 small functions, each of
  whose specification is given below. Some of them start out as
  code we provide you.  In our reference solution, each
  function typically requires writing or modifying 5-8 lines of code, 
  except for the last function, <tt>reachable</tt>, which is more involved.</p>

<p>
<b>This project is due in one week!</b> We recommend you get started
right away, going from top to bottom, and the problems get
increasingly more challenging. Doing so will also prepare you for the
quiz this Friday, and surely for the exam in just under two weeks' time.
</p>

<h2>Getting Started</h2>

Download the following archive file <a href="p2b.zip">p2b.zip</a>
and extract its contents.
<p>
Along with files used to make direct submissions to the
submit server (submit.jar, <a href=".submit">.submit</a> submit.rb), you will
find the following project files:
</p><ul>
<li>Your OCaml program - <a href="data.ml">data.ml</a>
<li>Extra functions you can use - <a href="funs.ml">funs.ml</a>
<li>Test utilities - <a href="testUtils.ml">testUtils.ml</a>
</li><li>Public tests
<ul>
<li> <a href="testHigherOrder0.ml">testHigherOrder0.ml</a>
<li> <a href="testHigherOrder1.ml">testHigherOrder1.ml</a>
<li> <a href="testIntTree.ml">testIntTree.ml</a>
<li> <a href="testpTree.ml">testpTree.ml</a>
<li><a href="testCommon1.ml">testCommon1.ml</a>
<li><a href="testCommon2.ml">testCommon2.ml</a>
<li> <a href="testGraph1.ml">testGraph1.ml</a>
<li> <a href="testGraph2.ml">testGraph2.ml</a>
<li> <a href="testReachable.ml">testReachable.ml</a>
</li></ul>
</li><li>Expected outputs for public tests
<ul>
<li> <a href="testHigherOrder0.out">testHigherOrder0.out</a>
<li> <a href="testHigherOrder1.out">testHigherOrder1.out</a>
<li> <a href="testIntTree.out">testIntTree.out</a>
<li> <a href="testpTree.out">testpTree.out</a>
<li><a href="testCommon1.out">testCommon1.out</a>
<li><a href="testCommon2.out">testCommon2.out</a>
<li> <a href="testGraph1.out">testGraph1.out</a>
<li> <a href="testGraph2.out">testGraph2.out</a>
<li> <a href="testReachable.out">testReachable.out</a>
</li></ul>
<li>Ruby script to run public tests- <a
href="goTest.rb">goTest.rb</a>. Note that you will need to comment out
line 20 and uncomment out either line 21 or 22 in this file, depending
on which platform you are developing your code.
</li></ul>
<p>

You may want to use functions from <tt>testUtils.ml</tt> for printing
debugging messages, but your actual submission in <tt>data.ml</tt>
should not print any output nor should it depend on the
<tt>testUtils.ml</tt> file in any way.

<p>

To run an individual test, you can type commands like <tt>ocaml
testHigherOrder0.ml</tt>. The output from the test will be printed to
the console. You should compare it to the corresponding <tt>.out</tt>
to see if it is correct (this is what <tt>goTest.rb</tt> does).

<p>

Note that you must implement your functions with the exact
parameter and return type specified, or else the submit server
tests will fail.

<p>

For this project the only OCaml libraries you are allowed to
use are those defined in the 
<a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html">Pervasives</a> 
module loaded by default.  
You are not allowed to use library functions found in any 
other modules, particularly <tt>List</tt> and <tt>Array</tt>. Versions
of <tt>fold</tt>, <tt>fold_right</tt>, and <tt>map</tt>, as discussed
in class, are in the file <tt>funs.ml</tt>.

<p>

<h2>Part 1: Higher order functions </h2>

Write the following functions using <tt>map</tt>, <tt>fold</tt>, or
<tt>fold_right</tt>, as defined in the file <a href =
"funs.ml">funs.ml</a>.

<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Type</b>
<td> <b>Return value</b>
<td> <b>Example</b>
</tr>

<tr>
<td> count_x x y  
<td> 'a -> 'a list -> int
<td> how many times x occurs in y  
<td> count_x 3 [1;3;1;1;3] = 2
<br>count_x "hello" ["there";"ralph"] = 0
</tr>

<tr>
<td> div_by_x x y 
<td> int -> int list -> bool list
<td> a list of booleans,
  each one indicating whether the correponding element in y is divisible by x 
<td> div_by_x 2 [1;3;4;8;0] = [false;false;true;true;true] 
</tr>

<tr>
<td> div_by_first y 
<td> int list -> bool list
<td> a list of booleans,
  each one indicating whether the correponding element in y is
  divisible by the first element of y 
<td> div_by_first [2;3;4;8;0] = [true;false;true;true;true]
 <br>div_by_first [] = []
</tr>

<tr>
<td> pair_up x y 
<td> 'a list -&gt; 'a list -&gt; 'a list list
<td> a list of lists, where each element of x paired with 
  each element of y 
<td>pairup [] [] = []<br>
  pairup [1;2] [3;4;5]= [[1; 3]; [1; 4]; [1; 5]; [2; 3]; [2; 4]; [2; 5]]</tr>



<tr>
<td> concat_lists x
<td> 'a list list -> 'a list
<td> a list consisting of the lists in x concatenated together
<br> note just top level of lists is concatenated, unlike List.flatten
<td> concat_lists [[1;2];[7];[5;4;3]] = [1;2;7;5;4;3]
<br> concat_lists [[[1;2;3];[2]];[[7]]] = [[1;2;3];[2];[7]]
</tr>

</table>

<h2>Part 2: Binary trees using user-defined types</h2>

<p>In this part, we provide you the starting point of an
implementation on binary search trees whose nodes contain
integers. First, we provide the type <tt>int_tree</tt>. According to
its definition, an <tt>int_tree</tt> is either empty (just a leaf), or
it is a node containing an integer, a left subtree, and a right
subtree.
<pre>
type int_tree =
    IntLeaf 
  | IntNode of int * int_tree * int_tree
</pre>

<p>An empty tree is simply a leaf:</p>
<pre>
let empty_int_tree = IntLeaf
</pre>

<p>Binary trees are <i>purely functional</i> -- just like lists, we
never change a tree once we have created it. Rather, to "insert" an
element into a tree, we create a new tree that is the same as the old
one but for the added element. The insertion routine follows the
standard algorithm for binary search trees.

<p>
Inserting x into tree t:
<ul>
<li>   if the tree is empty, then adding x produces a single-node tree
<li>   if x is greater than the value at the current node, 
     return a tree whose right subtree is replaced by the tree produced by
       inserting x into the current right subtree
<li>   if x is already in the tree, then return the tree unchanged
<li>   if x is less than the value at the current node, 
     do the opposite of when x was greater (i.e., insert in the left subtree)
</ul>

<pre>
let rec int_insert x t =
  match t with
      IntLeaf -> IntNode(x,IntLeaf,IntLeaf)
    | IntNode (y,l,r) when x > y -> IntNode (y,l,int_insert x r)
    | IntNode (y,l,r) when x = y -> t
    | IntNode (y,l,r) -> IntNode(y,int_insert x l,r)
</pre>

<p>Checking whether an element is in a tree follows the same sort of
   procedure as insertion, but returns true if x is in the tree and
   false otherwise (rather than returning a different tree)

<pre>
let rec int_mem x t =
  match t with
      IntLeaf -> false
    | IntNode (y,l,r) when x > y -> int_mem x r
    | IntNode (y,l,r) when x = y -> true
    | IntNode (y,l,r) -> int_mem x l
</pre>

<p>Note that we will use binary search trees to implement sets in part
C of the project. </p>

<p>Implement the following functions, operating on trees:

<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Type</b>
<td> <b>Return value</b>
<td> <b>Example</b>
</tr>

<tr>
<td> int_size t 
<td> int_tree -> int 
<td> how many nodes are in the tree 
<td> int_size empty_int_tree = 0 
<br> int_size (int_insert 1 (int_insert 2 empty_int_tree)) = 2  
</tr>

<tr>
<td> int_to_list t  
<td> int_tree -> int list 
<td> a list of all values in the tree, resulting from an in-order traversal 
<td> int_to_list (int_insert 2 (int_insert 1 empty_int_tree)) = [1;2]
  <br>int_to_list (int_insert 2 (int_insert 2 (int_insert 3 empty_int_tree))) = [2;3]
</tr>

<tr>
<td> int_insert_all xs t  
<td> int list -> int_tree -> int_tree
<td> a tree t' that is the same as t but has all integers in xs added to it 
<td> int_to_list (int_insert_all [1;2;3] empty_int_tree) = [1;2;3] 
<br> <b>Note</b>: Try to use fold to implement this function on one line 
</tr>

<tr>
<td> max_elem t  
<td>int_tree -> int
<td> the maximum element in the tree
  <br> or throws exception <tt>Failure "max_elem"</tt> for an empty tree
<td> max_elem (int_insert_all [1;2;3] empty_int_tree) = 3 
<br><b>Note:</b> This should take time O(height of the tree)
</tr>
<tr>
<td> common t x y  
<td>int_tree -&gt; int -&gt; int -&gt; int
<td> the closest common ancestor of x and y in the int_tree. throws exception <tt>Failure "common"</tt> for an empty tree, or x,y does not exists
<td>let t = int_insert_all [6;1;8;5;10;13;9;4] empty_int_tree;;<br>
  common t 1 10 = 6<br>
  common t 8 9 = 8</tr>

</table>

<p>The type <tt>int_tree</tt> only can contain integers. But we should
   be able to define a binary tree over any kind of data, as long as
   it is totally ordered. We capture this idea with the following data
   type definitions.

<p>First we define the type <tt>'a atree</tt>. Its definition is the
same as <tt>int_tree</tt> but is polymorphic, since the node may
contain a value of any type 'a, not just ints.
<pre>
type 'a atree =
    Leaf
  | Node of 'a * 'a atree * 'a atree
</pre>

<p>Since a tree may contain values of any type, we need a way to
   compare those values. For this purpose, we define the type of
   <i>comparison functions</i>: such functions take two values of type
   'a and return an int. If the returned value is negative, then the
   first value is less than the second; if positive, then the first is
   greater; if 0, then the two values are equal.
<pre>
type 'a compfn = 'a -> 'a -> int
</pre>

<p>Finally: here is our definition of a polymorphic binary tree: This
   definition bundles the tree with its comparison function so that
   the latter can be used when needed by the tree's functions, pinsert
   and pmem, below.
<pre>
type 'a ptree = 'a compfn * 'a atree
</pre>

<p>Now, to define an empty tree you must also provide a comparison
function.

<pre>
let empty_ptree f : 'a ptree = (f,Leaf)
</pre>

Now implement the following two functions. Start out by using the code
from the <tt>insert</tt> and <tt>mem</tt> functions from
<tt>int_trees</tt> but then modify it to use the <tt>ptree</tt>'s
bundled comparison function instead.

<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Type</b>
<td> <b>Return value</b>
<td> <b>Example</b>
</tr>

<tr>
<td> pinsert x t  
<td> 'a -> 'a ptree -> 'a ptree 
<td> a tree t' that is the same as t but has x added to it
<td> <i>See below</i>
</tr>

<tr>
<td> pmem x t  
<td> 'a -> 'a ptree -> bool
<td> whether x appears in tree t 
<td> <i>See below</i>
</tr>

</table>

<p>Here is an example use of these two functions, together

<pre>
let int_comp x y = if x < y then -1 else if x > y then 1 else 0;;
let t0 = empty_ptree int_comp;;
let t1 = pinsert 1 (pinsert 8 (pinsert 5 t0));;
pmem 5 t0 = false;;
pmem 5 t1 = true;;
pmem 1 t1 = true;;
pmem 2 t1 = false;;
</pre>

You might find it useful to write a printing function for trees.

<h2>Part 3: Using Records to program graphs</h2>

<p>The last part of the project asks that you implement some functions
on graphs. We provide the data definition for a graph, which in part
uses OCaml records.

<p>Here are the type definitions. Here a <tt>graph</tt> is record with
   two fields; the first <tt>nodes</tt> keeps a a set of nodes,
   represented as an int_tree, and the second field <tt>edges</tt>
   keeps a list of edges.  A node is represented as an int, and an
   edge is a record identifying its source and destination nodes.

<pre>
type node = int;;
type edge = { src: node; dst: node; };;
type graph = { nodes: int_tree; edges: edge list };;
</pre>

<p>An empty graph has no nodes (i.e., the empty integer tree) and has
no edges (the empty list).

<pre>
let empty_graph = {nodes = empty_int_tree; edges = [] }
</pre>

<p>The function <tt>add_edge</tt> adds an edge to a graph. Its type is
edge -> graph -> graph. Given an edge e and a graph g, it returns a
new graph that is the same as g, but with e added. Note that this
routine makes no attempt to eliminate duplicate edges; these could add
some inefficiency but should not harm correctness.

<pre>
let add_edge ({ src = s; dst = d } as e) { nodes = ns; edges = es } =
  let ns' = int_insert s ns in
  let ns'' = int_insert d ns' in
  let es' = e::es in
  { nodes = ns''; edges = es' }
</pre>

<p>Notice in the code above that the record pattern matching is taking
place in the arguments of <tt>add_edge</tt>, rather than as a
<tt>match</tt> statement. Also notice the pattern for the first
argument, <tt>({ src = s; dst = d } as e)</tt>. This gives name e to
that argument, and simultaneously matches it against the pattern <tt>{
src = s; dst = d }</tt>, also binding variables s and d. As such, e,
s, and d are all usable within the body of the function.

<p>We also provide a function <tt>add_edges</tt> to add multiple edges
at once.

<p>Here are the functions you must implement:

<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Type</b>
<td> <b>Return value</b>
<td> <b>Example</b>
</tr>

<tr>
<td> is_empty g  
<td> graph -> bool
<td> whether the graph g is empty 
<td> is_empty (add_edge { src = 1; dst = 2 } empty_graph) = false
  <br> is_empty empty_graph = true
</tr>

<tr>
<td> num_nodes g  
<td> graph -> int 
<td>  the number of nodes that appear in g
<td> num_nodes (add_edge { src = 1; dst = 2 } empty_graph) = 2 
  <br>num_nodes (add_edge { src = 1; dst = 1 } empty_graph) = 1
</tr>

<tr>
<td> is_dst x e  
<td> node -> edge -> bool 
<td>  true if x is the destination of the given edge 
<td> is_dst 1 { src = 1; dst = 2 } = false 
  <br>is_dst 2 { src = 1; dst = 2 } = true 
</tr>

<tr>
<td> src_edges x e  
<td> node -> graph -> edge list 
<td>  those edges in g whose source node is x 
<td> src_edges 1 
  (add_edges [{src=1;dst=2}; {src=1;dst=3}; {src=2;dst=2}] empty_graph) =
[{src=1;dst=2}; {src=1;dst=3}] 
</tr>

<tr>
<td> reachable n g 
<td> node -> graph -> int_tree 
<td>  a set of nodes reachable from n, in g, where the set is represented as an int_tree
<td> See below.
</tr>
  
</table>

Here are two examples for the operation of <tt>reachable</tt>:
<pre>
int_to_list 
  (reachable 1 
    (add_edges [{src=1;dst=2}; {src=1;dst=3}; {src=2;dst=2}] empty_graph)) =
[1;2;3];;

int_to_list 
  (reachable 3 
    (add_edges [{src=1;dst=2}; {src=1;dst=3}; {src=2;dst=2}] empty_graph)) =
[3];;
</pre>

<h2>Submission</h2>

You can submit your project in two ways:

<ul>
<li>
Submit your data.ml file directly to the 
<a href="http://submit.cs.umd.edu/">submit server</a> 
by clicking on the submit link in the column "web submission".

<p>
<img src="submit1.jpg">
</p><p>

Next, use the submit dialog to submit your data.ml file directly.

</p><p>
<img src="submit2.jpg">
</p><p>

Select your file using the "Browse" button, 
then press the "Submit project!" button.  
You <b>do not</b> need to put it in a Jar or Zip file.
Some students have mentioned problems 
with using Internet Explorer, because 
submissions being extracted in directories
(e.g., "C:\My Documents\330\data.ml") where
the submit server could not find them.  The
problems went away when switching to the 
Mozilla Firefox browser.

  </p></li>
  <li>
Submit directly by executing a Java program on a computer
with Java and network access.  Use the submit.jar file 
from the archive p2b.zip.
To submit, go to the directory containing your project, then either
execute submit.rb or type the following command directly:
<p> 

</p><center>
<tt>
java -jar submit.jar
</tt>
</center>
<p>

You will be asked to enter your class account and password, then
all files in the directory (and its subdirectories) will be
put in a jar file and submitted to the submit server.  
If your submission is successful you will see the message:
</p><p> 

</p><center>
<tt>
Successful submission #<submission_number> received for project 2b
</submission_number></tt>
</center>
<p>

</p></li></ul>

<h2>Academic Integrity</h2>

<p>
The Campus Senate has adopted a policy asking students to include the
following statement on each assignment in every course: "I pledge on
my honor that I have not given or received any unauthorized assistance
on this assignment."  Consequently your program is requested to
contain this pledge in a comment near the top.

</p><p>
Please <b>carefully read</b> the academic honesty section of the
course syllabus.  <b>Any evidence</b> of impermissible cooperation on
projects, use of disallowed materials or resources, or unauthorized
use of computer accounts, <b>will be submitted</b> to the Student
Honor Council, which could result in an XF for the course, or
suspension or expulsion from the University.  Be sure you understand
what you are and what you are not permitted to do in regards to
academic integrity when it comes to project assignments.  These
policies apply to all students, and the Student Honor Council does not
consider lack of knowledge of the policies to be a defense for
violating them.  Full information is found in the course
syllabus---please review it at this time.


</p></li></td>
</tr></tbody></table>

</body></html>
