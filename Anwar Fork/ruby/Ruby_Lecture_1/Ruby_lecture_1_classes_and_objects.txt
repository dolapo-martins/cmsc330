#CMSC330 Organizations of Programming Languages Fall 2016
# Anwar Mamat
# Lecture 1   Ruby classes

# How to execute Ruby Program

1. Ruby x.rb
2. irb		#quit to quit
3. Eclipse Ruby plugin
4. Add #! /bin/ruby to the ruby program and change mode chmod a+x x.rb


# Editor
#	Any text editor is good. We use Emacs in class

	
#Ruby classes
	#Everything is an object in Ruby. Every variables references an object.
	
	1.class		#	1 is Fixnum
	
	1473638940575746746362202020.class		#it is a Bignum
	
	"hello".class 		#It is a String object.
	
	true.class 			#TrueClass
	fals.class			#FalseClass
	nil.class			#NilClass
	
	nil.nil?	#return true. nil is an object too.
	0.nil?		#returns false because 0 is not nil.
	
	#Jennifer Null BBC story
	
	#false and nil are false. 0 is not false
	
	#Classes are objects too.
	
	1.class.class
	
	#The class of Class is Class.
	
	1.class.superclass			#Super class of Fixnum is Integer
	
	#all the ancestors of Fixnum
	
	1.class.ancestors			#[Fixnum, Integer, Numeric, Comparable, Object, Kernel, BasicObject]
	
	#Object is the superclass of every class
	
	#top level is an object of Object
	
	self.class		#Object
	
	#top level functions are added to Object class
	
	def anwar
		"my name is anwar"
	end
	
	#self.methods will list the method "anwar"
	
	
	#now, all ruby objects will have a method "anwar".
	
	1.anwar		#returns "my name is anwar"
	nil.anwar	#returns "my name is anwar"
	
	
	#we can dynamically add methods to existing classes
	
	class Fixnum 
		def double
			self + self
		end
	end
	
	# now, all old and new objects of Fixnum class have a method "double"
	
	10.double		#return 20
	
	
	#we can remove methods from classes too
	
	remove_method :method_name  # remove from child, still in parent	
	undef_method :method_name   # prevent any calls to 'hello'
	
	class Fixnum
		remove_method :double
	end
	
	10.double 	#undefined method `double' for 10:Fixnum
	
	#undefine a method from a class and superclasses
	
	1.size 		#returns 8
	class Fixnum
		undef_method:size
	end
	
	1.size		#undefined method `size' for 1:Fixnum
	
	#quiz irb and start again will fix the problem

	#We can even redefine existing methods
	class Fixnum 
		def +(a)
			1			#all integer additions return 1
		end
	end

	100+200				#returns 1. This may break irb, because irb is written in Ruby.
	
	
	# remove_method and undef_method example:
	
	class Parent
  		def hello
    		puts "In parent"
  		end
	end
	class Child < Parent
  		def hello
    		puts "In child"
  		end
	end

	c = Child.new
	c.hello

	class Child
  		remove_method :hello  # remove from child, still in parent
	end
	c.hello			#returns In parent

	class Child
  		undef_method :hello   # prevent any calls to 'hello'
	end
	
	c.hello			#undefined method `hello'
	
	
	

#Defining classes

	class class_name
		...
	end
	


class Hello

  def my_first_method
    puts "Hello, World!"
  end

end

x = Hello.new
x.my_first_method


# a class example

class Point
      def x=(x)
           @x = x
      end
    
      def x
      	  @x
      end
      def y=(y)
           @y = y
      end
    
      def y
      	  @y
      end
      # make the method prt private
      private
      def prt
      	  "#{@x}, #{@y}"
      end
      #Make the below methods public
      public 
      def to_s
      	  prt
      end

end


# attr_accessor

class Point
      attr_accessor :x, :y
      # make the method prt private
      private
      def prt
      	  "#{@x}, #{@y}"
      end
      #Make the below methods public
      public 
      def to_s
      	  prt
      end
end


# class variables  @@variables

class Person

      @@count = 0
      def initialize(name)
          @name = name
                @@count += 1
     end
     def self.count
         @@count
     end
end


p = Person.new("anwar")

Person.count	#returns 1 

p = Person.new("anwar")
p = Person.new("anwar")

Person.count    #returns 3



# include Comparable 
# spaceship operator <=>
# Fraction class




# stuff that we did not cover in class



# returning self is convenient for "stringing method calls"
class C
  def m1
    print "hi "
    self
  end
  def m2
    print "bye "
    self
  end
  def m3
    print "\n"
    self
  end
end


c = C.new
c.m1.m2.m3.m1.m1.m3



class D
  def m1
    @foo = 0
  end

  def m2 x
    @foo += x
  end

  def foo
    @foo
  end

end



class E 
  # uses initialize method, which is better than m1
  # initialize can take arguments too (here providing defaults)
  def initialize(f=0)
    @foo = f
  end

  def m2 x
    @foo += x
  end

  def foo
    @foo
  end

end




#subclass overrides the method in the base class if the method name is same. 

class A
      def m1(x)
      	  x
      end
end

class B < A
      #m1 overrides m1 in A although they have different argument list
      def m1(x,y)
      	  x+y
      end
end





#visibility
	private
	ptotected
	public
	
